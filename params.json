{"name":"KGPU","tagline":"Augmenting Linux with the CUDA GPU - See important notice here: http://code.google.com/p/kgpu/","body":"\r\n     KGPU - Augmenting Linux with GPUs\r\n\r\n\r\nWhat is it?\r\n\r\n     Treating the GPU as a computing co-processor. To enable the\r\n     data-parallel computation inside the Linux kernel. Using SIMD (or\r\n     SIMT in CUDA) style code to accelerate Linux kernel\r\n     functionality.\r\n\r\n     Make the Linux kernel really parallelized: which is not only\r\n     processing multiple requests concurrently, but can also partition\r\n     a single large requested computation into tiles and do them on\r\n     GPU cores.\r\n\r\n     GPU can give the OS kernel dedicated cores that can be fully\r\n     occupied by the kernel. But the multicore CPUs should not be\r\n     occupied by the kernel because other tasks also need them.\r\n\r\n     KGPU is not an OS running on GPU, which is almost impossible\r\n     because of the limited functionality of current GPU\r\n     architectures. KGPU tries to enable vector computing for the\r\n     kernel.\r\n\r\n     *To access the code, using git to clone:\r\n     git@github.com:wbsun/kgpu.git or goto\r\n     https://github.com/wbsun/kgpu .*\r\n\r\n     As for copyright license, we use GPLv2.\r\n\r\nTry it?\r\n\r\n    Hardware:\r\n\tWe use GTX480 or Tesla C2070. You don't need such high-end video\r\n    \tcard, but you should have a NVIDIA card that support CUDA\r\n    \tcomputing capability 2.0 or higher.  If you don't have more\r\n    \tthan 1G video memory, change KGPU_BUF_SIZE in kgpu/kgpu.h to\r\n    \tmake sure KGPU_BUF_SIZE*2 < Size of Your Video\r\n    \tMemory - (x) where the max of x is a value that you need try\r\n    \tsome times to figure out. Or simply leave x = 64M or 128M.\r\n\r\n\tNotice a new change: we enabled a new feature to allow\r\n\tKGPU remapping any kernel pages into CUDA page-locked\r\n\tmemory, the remapping also need video memory on the GPU\r\n\tside, so now there are two GPU buffers with the same size,\r\n\twhich is KGPU_BUF_SIZE. So KGPU_BUF_SIZE should be <=\r\n\tvideo memory size/2.\r\n\r\n    Software:\r\n        We compile the CUDA code with nvcc in CUDA 4.2. The OS\r\n\tkernel is vanilla Linux 2.6.39.4 to 3.4. You MUST use a 64bit linux\r\n\tkernel compiled targeting at x86_64!\r\n\r\n    Make and Run it:\r\n        Check out the code from Github or download the\r\n        archive from Google Code and extract files into say kgpu\r\n        directory:\r\n\t    cd kgpu && make all\r\n\t\t\r\n\tNow all outputs are in build directory. To run it:\r\n\t    cd build && sudo ./runkgpu\r\n\r\n\tThis only starts KGPU module, helper and loads AES ciphers.\r\n\tTo use modified eCryptfs and dm-crypt, in the build directory:\r\n\t    sudo insmod ./ecryptfs.ko && sudo insmod ./dm-crypt\r\n     \r\n\r\n        NOTE: DO NOT USE THIS ECRYPTS FOR IMPORTANT DATA!!!\r\n              THIS IS NOT COMPATIBLE WITH THE VANILLA ECRYPTFS.\r\n\t      SAME CARE SHOULD BE TAKEN WITH DM-CRYPT.\r\n\t      \r\n    To stop it:\r\n        Umount your eCryptfs partition, delete dm-crypt mappers and:\r\n        sudo rmmod ecryptfs && sudo rmmod dm-crypt\r\n        Stop \"helper\" program by Ctrl-C\r\n        sudo ./stopkgpu (in build/)\r\n\r\n\r\nWeibin Sun, Xing Lin\r\n{wbsun, xinglin}@cs.utah.edu\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}